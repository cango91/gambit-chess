---
description: Chess-specific implementation standards for Gambit Chess
globs: **/*.ts, **/*.tsx
---

# Chess Implementation Standards

## 1. Board Representation

### 1.1 Coordinate System
- Use algebraic notation (a1-h8) for human-readable positions
- Use zero-based indices (0-7, 0-7) for internal representation
- Provide utility functions to convert between the two
- Consistently handle board orientation (white at bottom)

### 1.2 Piece Representation
- Use standard FEN piece notation (P,N,B,R,Q,K,p,n,b,r,q,k)
- Represent pieces with consistent interfaces
- Store piece type, color, and position separately
- Include utility functions for piece identification

## 2. Game Mechanics

### 2.1 Move Validation
- Implement standard chess move validation rules
- Support special moves (castling, en passant, promotion)
- Validate for check and checkmate conditions
- Enforce proper turn order

### 2.2 Battle Points (BP) System
- Track BP pools for each player
- Implement duel resolution system
- Calculate BP regeneration from tactical advantages
- Handle BP allocation securely to prevent information leakage

### 2.3 Tactical Retreat
- Implement piece-specific retreat rules
- Pre-compute knight retreat options using Knight Retreat Table
- Calculate retreat costs accurately
- Validate retreat positions against board state

## 3. Chess Notation

### 3.1 Standard Notation
- Support Standard Algebraic Notation (SAN)
- Support Portable Game Notation (PGN) for game records
- Implement conversion between move objects and notation strings

### 3.2 Gambit Chess Extensions
- Extend notation with BP allocation: `exd5[A:5/D:7]`
- Include tactical retreat notation: `â†’c3(2)`
- Add BP regeneration notation: `{+3}`
- Ensure notation is compatible with standard chess tools

## 4. Tactics Detection

### 4.1 De Novo Tactical Advantage Detection
- Detect pins, forks, skewers, and other tactics
- Compare before/after board states for new tactics only
- Calculate proper BP regeneration amounts
- Document tactical detection algorithms clearly

### 4.2 Check and Checkmate Detection
- Implement efficient algorithms for check detection
- Check for checkmate by verifying no legal moves exist
- Handle stalemate and other draw conditions
- Ensure tactical retreat doesn't leave king in check

## 5. Performance Considerations

### 5.1 Computation Efficiency
- Optimize move validation for performance
- Use bitboards or efficient board representations when appropriate
- Minimize redundant calculations
- Cache results when beneficial (e.g., valid move calculations)

### 5.2 Memory Efficiency
- Use compact data structures for board state
- Consider memory usage for mobile devices
- Balance between performance and memory usage

## 6. Testing Chess Logic

### 6.1 Test Coverage
- Create comprehensive tests for all chess rules
- Test edge cases like castling through check, en passant
- Include tests for BP allocation and retreat mechanics
- Verify tactical advantage detection accuracy

### 6.2 Test Examples
- Use real-world chess positions for testing
- Include tests for famous tactical positions
- Test BP regeneration with various board configurations
- Verify notational accuracy with sample games 