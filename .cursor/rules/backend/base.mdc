---
description: 
globs: server/**/*.js,server/**/*.ts,server/api/**/*.js,server/api/**/*.ts
alwaysApply: false
---
 @../main.mdc
Description: Backend development standards for Gambit Chess server

# Server Architecture
- Implement layered architecture as defined in section 3.3 of README
- Delegate route handlers to service classes
- Isolate WebSocket event handling in dedicated controllers
- Contain AI logic in isolated modules
- Use dependency injection for service composition

# API Implementation
- Follow REST API endpoints defined in section 10.1
- Implement standardized error handling and response formats
- Validate all incoming requests
- Include appropriate HTTP status codes
- Document API endpoints with JSDoc or OpenAPI

# WebSocket Protocol
- Implement WebSocket events as defined in section 10.2
- Ensure proper authentication for socket connections
- Handle connection errors and reconnection strategies
- Implement room-based game sessions
- Use standardized event naming conventions

# Game State Management
- Implement temporary storage with Redis for active games
- Ensure atomic game state updates
- Implement proper cleanup for abandoned games
- Track game history for potential replay functionality
- Validate all game state transitions

# AI Implementation
- Follow difficulty levels defined in section 11.1
- Implement evaluation function components from section 11.2
- Create isolated AI modules for testability
- Optimize algorithm performance for real-time gameplay
- Add configurable AI difficulty settings

Globs:
  server/**/*.js
  server/**/*.ts
  server/api/**/*.js
  server/api/**/*.ts